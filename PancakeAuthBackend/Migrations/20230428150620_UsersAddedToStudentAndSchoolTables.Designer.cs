// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PancakeAuthBackend.Data;

#nullable disable

namespace PancakeAuthBackend.Migrations
{
    [DbContext(typeof(BackendDataContext))]
    [Migration("20230428150620_UsersAddedToStudentAndSchoolTables")]
    partial class UsersAddedToStudentAndSchoolTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Hershey",
                            Country = "USA",
                            PostalCode = "2456-82",
                            Region = "Downtown",
                            State = "Pennsylvania",
                            StreetName = "Wagner Street #22"
                        },
                        new
                        {
                            Id = 2,
                            City = "NYC",
                            Country = "USA",
                            PostalCode = "1155-82",
                            Region = "Bronx",
                            State = "New York",
                            StreetName = "Browning Ave"
                        },
                        new
                        {
                            Id = 3,
                            City = "Birmingham",
                            Country = "UK",
                            PostalCode = "S4356",
                            Region = "Central England",
                            State = "England",
                            StreetName = "Turing Street, 35th Avenue"
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.AvailedSubscription", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "SubscriptionId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("AvailedSubscription");

                    b.HasData(
                        new
                        {
                            SchoolId = 1,
                            SubscriptionId = 1
                        },
                        new
                        {
                            SchoolId = 1,
                            SubscriptionId = 2
                        },
                        new
                        {
                            SchoolId = 1,
                            SubscriptionId = 3
                        },
                        new
                        {
                            SchoolId = 2,
                            SubscriptionId = 1
                        },
                        new
                        {
                            SchoolId = 2,
                            SubscriptionId = 2
                        },
                        new
                        {
                            SchoolId = 3,
                            SubscriptionId = 1
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Batches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "5A",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "7A",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "2A",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "3A",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "5B",
                            SchoolId = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "7B",
                            SchoolId = 3
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 156200,
                            Details = "Billed on 6 subscriptions. First Availed on the date 12/11/22",
                            DueDate = new DateTime(2023, 4, 28, 20, 36, 20, 149, DateTimeKind.Local).AddTicks(3556),
                            SchoolId = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 23900,
                            Details = "Billed on 1 subscription(s). First Availed on the date 09/10/22",
                            DueDate = new DateTime(2023, 4, 28, 20, 36, 20, 149, DateTimeKind.Local).AddTicks(3568),
                            SchoolId = 1,
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 78650,
                            Details = "Billed on 4 subscription(s). First Availed on the date 04/12/22",
                            DueDate = new DateTime(2023, 4, 28, 20, 36, 20, 149, DateTimeKind.Local).AddTicks(3569),
                            SchoolId = 2,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 245790,
                            Details = "Billed on 8 subscription(s). First Availed on the date 02/01/23",
                            DueDate = new DateTime(2023, 4, 28, 20, 36, 20, 149, DateTimeKind.Local).AddTicks(3570),
                            SchoolId = 3,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 156200,
                            Details = "Billed on 6 subscriptions. First Availed on the date 01/02/23",
                            DueDate = new DateTime(2023, 4, 28, 20, 36, 20, 149, DateTimeKind.Local).AddTicks(3571),
                            SchoolId = 3,
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Intro to Newtonian Gravitation",
                            SubjectId = 1,
                            Title = "Gravity"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Intro to Thermodynamics",
                            SubjectId = 1,
                            Title = "Thermodynamics"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Intro to Kinematics",
                            SubjectId = 1,
                            Title = "Kinematics"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Intro to Matrix Manipulation",
                            SubjectId = 2,
                            Title = "Matrices"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Intro to 2D Vectors",
                            SubjectId = 2,
                            Title = "Vectors"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Intro to Organic Chemistry",
                            SubjectId = 3,
                            Title = "Organic Chemistry"
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.ChaptersIncluded", b =>
                {
                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("ChapterId", "SubscriptionId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("ChaptersIncluded");

                    b.HasData(
                        new
                        {
                            ChapterId = 1,
                            SubscriptionId = 1
                        },
                        new
                        {
                            ChapterId = 4,
                            SubscriptionId = 1
                        },
                        new
                        {
                            ChapterId = 6,
                            SubscriptionId = 1
                        },
                        new
                        {
                            ChapterId = 4,
                            SubscriptionId = 2
                        },
                        new
                        {
                            ChapterId = 5,
                            SubscriptionId = 2
                        },
                        new
                        {
                            ChapterId = 1,
                            SubscriptionId = 3
                        },
                        new
                        {
                            ChapterId = 2,
                            SubscriptionId = 3
                        },
                        new
                        {
                            ChapterId = 3,
                            SubscriptionId = 3
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "12"
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SchoolManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SchoolManagerId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Name = "Hershey"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Name = "Jefferson High"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Name = "Hawthrone Elementary"
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("CityOfOrigin")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("StateOfOrigin")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StudentUID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentUID")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatchId = 1,
                            CityOfOrigin = "Orlando",
                            CountryOfOrigin = "US",
                            Email = "Jon@TonightShow.com",
                            GradeId = 5,
                            Name = "Jon Stewart",
                            Nationality = "American",
                            PhoneNumber = "555-7896",
                            SchoolId = 1,
                            StateOfOrigin = "Florida",
                            StudentUID = "1HE234089"
                        },
                        new
                        {
                            Id = 2,
                            BatchId = 3,
                            CityOfOrigin = "Detroit",
                            CountryOfOrigin = "US",
                            Email = "green@barrel.com",
                            GradeId = 2,
                            Name = "Millie Dyer",
                            Nationality = "American",
                            PhoneNumber = "555-2561",
                            SchoolId = 2,
                            StateOfOrigin = "Michigan",
                            StudentUID = "1JE768901"
                        },
                        new
                        {
                            Id = 3,
                            BatchId = 6,
                            CityOfOrigin = "Jersey City",
                            CountryOfOrigin = "US",
                            Email = "Braazen@fox.com",
                            GradeId = 7,
                            Name = "Corey Black",
                            Nationality = "American",
                            PhoneNumber = "555-8576",
                            SchoolId = 3,
                            StateOfOrigin = "New Jersey",
                            StudentUID = "1HT234586"
                        },
                        new
                        {
                            Id = 4,
                            BatchId = 1,
                            CityOfOrigin = "Tuscon",
                            CountryOfOrigin = "US",
                            Email = "Dana@Verasity.com",
                            GradeId = 5,
                            Name = "Dana White",
                            Nationality = "American",
                            PhoneNumber = "555-1111",
                            SchoolId = 1,
                            StateOfOrigin = "Arizona",
                            StudentUID = "1HE456456"
                        },
                        new
                        {
                            Id = 5,
                            BatchId = 1,
                            CityOfOrigin = "Miami",
                            CountryOfOrigin = "US",
                            Email = "Power@Ranger.com",
                            GradeId = 5,
                            Name = "Blake Shelling",
                            Nationality = "American",
                            PhoneNumber = "555-7905",
                            SchoolId = 1,
                            StateOfOrigin = "Florida",
                            StudentUID = "1HE093455"
                        },
                        new
                        {
                            Id = 6,
                            BatchId = 2,
                            CityOfOrigin = "Seattle",
                            CountryOfOrigin = "US",
                            Email = "dark@detective.com",
                            GradeId = 7,
                            Name = "Naomi Wattson",
                            Nationality = "American",
                            PhoneNumber = "555-5467",
                            SchoolId = 1,
                            StateOfOrigin = "Washington",
                            StudentUID = "1HE890123"
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chemistry"
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Standard Subscription",
                            Name = "Default",
                            Type = "Included"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Added Modules for Math",
                            Name = "Math Magic",
                            Type = "Add-On"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Added Modules for Physics",
                            Name = "Physics Booster",
                            Type = "Add-On"
                        });
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("ClassManagerGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassManagerSchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("CoSMSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClassManagerGradeId");

                    b.HasIndex("ClassManagerSchoolId");

                    b.HasIndex("CoSMSchoolId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PancakeAuthBackend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.AvailedSubscription", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.School", "School")
                        .WithMany("AvailedSubscriptions")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PancakeAuthBackend.Models.Subscription", "Subscription")
                        .WithMany("AvailedSchools")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Batch", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.School", "School")
                        .WithMany("Batches")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Billing", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.School", "School")
                        .WithMany("Payments")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Chapter", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.ChaptersIncluded", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.Chapter", "Chapter")
                        .WithMany("IncludedInSubscriptions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PancakeAuthBackend.Models.Subscription", "Subscription")
                        .WithMany("IncludedChapters")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.School", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.Address", "Address")
                        .WithOne("School")
                        .HasForeignKey("PancakeAuthBackend.Models.School", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PancakeAuthBackend.Models.User", "SchoolManager")
                        .WithMany()
                        .HasForeignKey("SchoolManagerId");

                    b.Navigation("Address");

                    b.Navigation("SchoolManager");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Student", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.Batch", "Batch")
                        .WithMany("Students")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PancakeAuthBackend.Models.Grade", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PancakeAuthBackend.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PancakeAuthBackend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Batch");

                    b.Navigation("Grade");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.User", b =>
                {
                    b.HasOne("PancakeAuthBackend.Models.Grade", null)
                        .WithMany("ClassManager")
                        .HasForeignKey("ClassManagerGradeId");

                    b.HasOne("PancakeAuthBackend.Models.School", null)
                        .WithMany("ClassManagers")
                        .HasForeignKey("ClassManagerSchoolId");

                    b.HasOne("PancakeAuthBackend.Models.School", null)
                        .WithMany("CoSchoolManagers")
                        .HasForeignKey("CoSMSchoolId");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Address", b =>
                {
                    b.Navigation("School");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Batch", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Chapter", b =>
                {
                    b.Navigation("IncludedInSubscriptions");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Grade", b =>
                {
                    b.Navigation("ClassManager");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.School", b =>
                {
                    b.Navigation("AvailedSubscriptions");

                    b.Navigation("Batches");

                    b.Navigation("ClassManagers");

                    b.Navigation("CoSchoolManagers");

                    b.Navigation("Payments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Subject", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("PancakeAuthBackend.Models.Subscription", b =>
                {
                    b.Navigation("AvailedSchools");

                    b.Navigation("IncludedChapters");
                });
#pragma warning restore 612, 618
        }
    }
}
